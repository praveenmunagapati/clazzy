=================
 About Cranberry
=================

Cranberry is a code generation platform, which focuses on handling 
class definition syntax for the user in a variety of programming langauges.

By writing a straight-forward description of a high-level class design,
Cranberry will generate code in a number of user-specified programming
languages with "TODO" comments in function bodies.

This allows developers to quickly set up a multi-language project without
having to shift between language syntaxes for the boiler-plate class
definitions.  This avoids typos between projects, prevents compile-time errors
for simple syntax issues, and most importantly saves time.

=====================
 Supported Languages
=====================
Cranberry can generate code for:

    C++
    C
    Java
    Python

=========================
 Supported Functionality
=========================

TODO

===========================
 Unsupported Functionality
===========================

TODO

===========
 Compiling
===========

If you haven't changed any of the code, you should be able to simply run:

    make

If you have changed the code, you may need to have flex installed, but
the same process will work.

=========
 Classes
=========

---------
 Parsing
---------

parser:
    Implements functions corresponding to the grammar rules below (in 
    recusive descent fashion) that uses FlexParser to read input.
    
    Contains a vector of class-def's and an array of languages it will 
    generate.

---------------
 Data Modeling
---------------

class_def:
    Represents a class definition.

    Contains a vector of functions and another of members.

function:
    Represents a function declaration.

    Contains a map from function names to parameter names.

member:
    Represenets a class member.

    Contains a name.

-----------
 Languages
-----------

langauge:
    An abstract class meant to be extended for plugging in new languages.

language_factory:
    A class with a single static method, with acts as a bridge between
    the parser and the language implementations themselves.

========
 Tokens
========
INDEFINITE_ARTICLE              "a" or "an" (case insensitive)
IDENTIFIER                      [a-zA-Z_\-]+
PROPERTY                        [a-zA-Z_]+=[^;]*
GENERIC_TYPE                    "array" or "deque" or "list" or "set" or
                                "stack" or "queue" or "map" or "pointer" 
                                (case insensitive)
PRIMITIVE_TYPE                  "byte" or "short" or "integer" or "long" or
                                "character" or "string" or "float" or
                                "double" or "boolean" or "void"
                                (case insenstive)

NOTE: These are only defined for use below.  See src/cranberry.lex and src/h/token.h for a more complete list.

=========
 Grammar
=========

program:    statement
        |   statement program

statement:  property
        |   type-definition

property:   "%" PROPERTY ";"

type-definition:    INDEFINITE_ARTICLE IDENTIFIER definition-list
                |   IDENTIFIER "is" INDEFINITE_ARTICLE IDENTIFIER "."
                |   IDENTIFIER "is" INDEFINITE_ARTICLE IDENTIFIER "that" definition-list

definition-list:    definition ";" definition-list
                |   definition ";" "and" definition "."
                |   definition "."

definition: "can" action-list
        |   "has" attribute-list

action-list:    action "," action-list
            |   action

action: type-hint IDENTIFIER "(" parameter-list ")"
    |   type-hint IDENTIFIER
    |   "static" action
    |   "read-only" action

parameter-list: parameter "," parameter-list
            |   parameter

parameter:  type-hint IDENTIFIER
        |   type-hint IDENTIFIER "reference"
        |   "constant" type-hint IDENTIFIER
        |   "constant" type-hint IDENTIFIER "reference"

attribute-list: type-hint IDENTIFIER "," attribute-list
            |   type-hint IDENTIFIER

type-hint:  GENERIC_TYPE "<" generic-type-list ">"
        |   PRIMITIVE_TYPE

generic-type-list:  type-hint "," generic-type-list
                |   type-hint

