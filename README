
==============
 About Clazzy
==============

Clazzy is a code generation library, which focuses on representing
object-oriented projects in a language-agnostic fashion.  In doing so, clazzy
makes it possible to, given appropriate input, generate source-code skeletons
in a variety of languages.

In a manner similar to how many machine-code compilers generate assembly rather
than directly translating high-level code in binary, clazzy operates by generating
an intermediate representation that can be used as a bridge between various
forms of input and output.

============
 Installing
============

For instructions on building and installing clazzy, see the INSTALL file.

The following dependencies are required to compile clazzy:

    cmake
    flex (or flex++)
    gnu make or some other cmake-supported build tool

Clazzy is officially developed only in a GNU/Linux environment and portability
is not guaranteed.  However, due to the portability provided by cmake and my
best attempts at making the code portable, the vast majority of the code base
should at least be conducive to porting to another system.

===========
 Licensing
===========

For information on licensing and copying, see the file called LICENSE.

=============================
 Intermediate Representation
=============================

The intermediate representation generated by clazzy is a vertical-bar-separated
format that stores the following components and details:

- Interfaces
    - Name
    - Accessibility
    - Methods (see functions)

- Classes
    - Name
    - Accessibility
    - Parents/Interfaces
    - Design Patterns
    - Members
        - Name
        - Type
        - Accessibility
        - Default value
    - Methods (see functions)

- Functions
    - Name
    - Return type
    - Accessibility
    - Arguments
        - Name
        - Type
        - Modifiers
        - Default value

The following access modifiers are tracked.  Language implementations must
determine how these devolve/expand for languages which have fewer modifiers:
    - private
    - protected
    - internal/package
    - public

Also included in "Accessibility" above:
    - static
    - read-only (i.e. const/final)
    - final     (i.e. non-virtual) [methods only]

The following types are tracked.  These are intended to stand in for common
types available in various languages and will need to be appropriately
translated as a part of language implementations:
    - "Generic" Types:
        - array
        - deque
        - list
        - map
        - pointer
        - queue
        - set
        - stack
    - Primitive Types:
        - boolean
        - byte
        - character
        - double
        - float
        - integer
        - long
        - short
        - string
        - void

-------------
 File Format
-------------

The file format for the intermediate representation is a series of new-line
separate records that themselves have vertical-bar-separated fields.  The
record types are:
    - Class/Interface record
    - Method record
    - Member record

A class/interface record should come first, followed by a series of
method/member records in any order.  Two consecutive newlines designates the end
of a class definition.  The records are formated as follows:

--- Class record ---
C|<class-name>|<access>|<parents, csv>|<design-patterns>
    - or -
I|<interface-name>|<access>|<parents, csv>

--- Method record ---
M|<method-name>|<access>|<return-type>|<argument-1, csv>|...|<argument-n, csv>

--- Member record ---
m|<member-name>|<access>|<type>

===============
 Functionality
===============

Clazzy should, in general, be able to build code skeletons that can be used
to quickly get new projects on their feet quickly.  The generated code is 
expected to be edited by the user and is not necessarily expected to compile.

However, clazzy should be able to build portable, object-oriented code in many
languages.  Clazzy, should focus, at a minimum on providing some form of the 
key concepts in object-oriented programming including modularity, encapsulation,
and inheritance.

Clazzy will also attempt to emulate the most common practices for a given 
language, including code formatting, capitalization, and directory structure
from the same, common input.

For a more complete list of clazzy's features, see:

    http://wiki.clazzy.org/index.php/Feature_List

=========
 Classes
=========

All source files can be found in the src/ and src/h/ directories.

------------------
 Input Processing
------------------

parser:
    Implements functions corresponding to the grammar rules below (in 
    recusive descent fashion) that uses FlexParser to read input.

    Contains a vector of class-def's and an array of languages it will 
    generate.

type_hint:
    Defines a high-level "type" that can optionally accept template or "generic"
    parameters.

type_convertor:
    Used by a language to convert type_hint objects into language-specific
    strings.

validator:
    Used just after parsing to find any issues in the class definitions and
    any intermediate processing.

---------------
 Data Modeling
---------------

class_def:
    Represents a class definition.  Is responsible for storing all relevant
    data for a "class" including high-level intentions like design patterns.

constructor:
    Represents a constructor definition, includes parameters and access 
    information.

method:
    Represents a function definition.  Contains parameter names and types, as
    well as access and return type information.

member:
    Represents a class member, with type and access information.

accessible:
    A programming structure that is encapsulated.

parameterized:
    A programming structure that accepts parameters (inherited by constructor
    and method).

class_component:
    A programming structure that has basic access restrictions, such as
    static or read-only access (inherited by method and member).

The following type hierarchy is relevant to the above classes, with parents at
the top and children beneath.  Note that multiple inheritance is used to reduce
code redundancy and to reflect the nature of the types at a symbolic level.

          accessible   parameterized
         /    |    \     /    |
        /     |     \   /     |
  class_def   |  constructor  |
              |               |
              |              /
       class_component      /
            /   \          /
           /     \        /
          /       \      /
       member      method
                                        

-----------
 Languages
-----------

language:
    An abstract class meant to be extended for plugging in new languages.

language_factory:
    A class with a single static method, with acts as a bridge between
    the parser and the language implementations themselves.

----------------
 Helper Methods
----------------

io_functions:
    Provides methods for creating files and directories.

    First place to start for porting code.

string_functions:
    Provides methods for changing case for different language implementations.

=======
 Types
=======

Generic Types:
    "array", "deque", "list", "set",
    "stack", "queue", "map", "pointer" 

Primitive Types:
    "byte", "short", "integer", "long",
    "character", "string", "float",
    "double", "boolean", "void"

========
 Tokens
========

NOTE: These are only defined for the grammar below.
      See src/clazzy.lex and src/h/token.h for a more complete list.


INDEFINITE_ARTICLE              "a" or "an"
IDENTIFIER                      [a-zA-Z_\-]+
PROPERTY                        [a-zA-Z_]+=[^;]*

ACCESS_TYPE                     "visible" or "hidden" or
                                "child-visible" or "assembly-visible"

=========
 Grammar
=========

program:    statement
        |   statement program

statement:  property
        |   type-definition

property:   "%" PROPERTY ";"

type-definition:    INDEFINITE_ARTICLE IDENTIFIER definition-list

definition-list:    definition ";" definition-list
                |   definition ";" "and" definition "."
                |   definition "."

definition: "is" INDEFINITE_ARTICLE parent-list
        |   "has" attribute-list
        |   "can" action-list

parent-list:    parent "," parent-list
            |   parent

parent: type-hint
    |   "@" IDENTIFIER

action-list:    action "," action-list
            |   action

action: type-hint IDENTIFIER parameters
    |   type-hint IDENTIFIER
    |   "static" action
    |   "read-only" action
    |   ACCESS_TYPE action

parameters: "(" parameter-list ")"
        |   "(" ")"

parameter-list: parameter "," parameter-list
            |   parameter

parameter:  type-hint IDENTIFIER
        |   type-hint IDENTIFIER
        |   "constant" parameter [NOT IMPLEMENTED]
        |   parameter "reference" [NOT IMPLEMENTED]

attribute-list: attribute "," attribute-list
            |   attribute

attribute:  ACCESS_TYPE attribute [IMPLEMENTED NON-RECURSIVELY]
        |   constructor
        |   member
        |   member "with" "get"
        |   member "with" "set"
        |   member "with" "getset"

constructor:    "@construct" parameters
            |   "@destruct"
            |   "@destruct" "(" ")"

member: "static" member
    |   "constant" member
    |   type-hint IDENTIFIER

type-hint:  IDENTIFIER "<" generic-type-list ">"
        |   IDENTIFIER

generic-type-list:  type-hint "," generic-type-list
                |   type-hint

==========
 Contacts
==========

For bug reporting, or any other correspondence, use one of the following vectors:

    - GitHub:       https://github.com/thesquaregroot/clazzy
    - Clazzy Wiki:  https://wiki.clazzy.org/index.php/Main_Page
    - Email:        Andrew Groot <andrew@clazzy.org>

