
==============
 About Clazzy
==============

Clazzy is a code generation library, which focuses on representing
object-oriented projects in a language-agnostic fashion.  In doing so, clazzy
makes it possible to, given appropriate input, generate source-code skeletons
in a variety of languages.

In a manner similar to how many machine-code compilers generate assembly rather
than directly translating high-level code in binary, clazzy operates by
generating an intermediate representation that can be used as a bridge between
various forms of input and output.

===========
 Licensing
===========

For information on licensing and copying, see the file called LICENSE.

========
 Design
========

Clazzy represents all defined entities as "classes".  The determination of
entities like interfaces or abstract classes is purely logical, as different
languages handle these concepts differently.  For example, a "class" may qualify
as an "interface" if all of its methods are abstract and it does not contain any
non-static members.

Classes support the following information:

- Classes
    - Name
    - Parents (Classes/Interfaces)
    - Intended Design Patterns
    - Basic Description/Documentation
    - Accessibility*
    - Template/Generic Parameters*
    - Namespace*
    - Package*
    - Methods (see functions)
        - Name
        - Return type
        - Accessibility
        - Basic Description/Documentation
        - Arguments
            - Name
            - Type
            - Modifiers
            - Default value*
    - Members
        - Name
        - Type
        - Accessibility
        - Basic Description/Documentation
        - Default value

* for languages that support these features.

The following access modifiers are tracked.  Language implementations must
determine how these devolve/expand for languages which have fewer modifiers:
    - private
    - protected
    - public

Also included in "Accessibility" above:
    - static
    - read-only (i.e. const/final)
    - final     (i.e. non-virtual) [methods only]

The following core types are available.  These are intended to stand in for
common types available in various languages and will need to be appropriately
translated as a part of language implementations:

    - "Generic" Types:
        - array
        - deque
        - list
        - map
        - queue
        - set
        - stack
    - Primitive Types:
        - boolean
        - byte
        - character
        - double
        - float
        - integer
        - long
        - short
        - string
        - void

=============================
 Intermediate Representation
=============================

-------------
 File Format
-------------

The file format for the intermediate representation is a series of new-line
separate records that themselves have vertical-bar-separated fields.  The first
characters is a designator of the record type. The record types (and
designators) are:

    - Class Record              [C]
    - Method Record             [M]
    - Argument Record           [a]
    - Member Record             [m]
    - Documentation Record      [D]

A class/interface record should come first, followed by a series of
method/member records in any order.  Two consecutive newlines designates the end
of a class definition.  The records are formated as follows:

--- Class Record
C|<class-name>|<parents-csv>|<design-patterns-csv>|<access>|<generic-type-count>|<namespace>|<package>

--- Method Record
M|<method-name>|<access>|<return-type>

--- Argument Record
a|<argument-name>|<access>|<type>|<default-value>

--- Member Record
m|<member-name>|<access>|<type>|<default-value>

Any of the above records can be followed immediately by a documentation record:

D|<short-description>|<detail>

For example, a class "Student" with a single member for a name and getter and
setter methods for that member might look like:

    C|Student|||p||myproject|com.example.myproject
    D|A student class|Describes a student with a name.
    m|name|p|string|
    M|setName|p|void|
    a|name||string|
    M|getName|p|string|

Components above ending in "-csv" should be a comma-separated list of values.
The "<access>" components should be a series of characters matching the below
table:

    +-----------+-------+
    | modifier  | char  |
    |-----------+-------+
    | public    |   p   |
    | private   |   v   |
    | protected |   t   |
    | static    |   s   |
    | read-only |   r   |
    | final     |   f   |
    +-----------+------+

Constructors and destructors are defined as methods with the name [construct] or
[destruct] respectively.  Return types are ignored in these cases.

Default values should only apply to primitive types and should abide by standard
representations of such values (e.g. 1, 589, "test").  '"null"' would denote a
string value, while 'null' (no quotes) would denotes a null pointer/reference.

=======
 Types
=======

Generic Types:
    "array", "deque", "list", "set",
    "stack", "queue", "map", "pointer" 

Primitive Types:
    "byte", "short", "integer", "long",
    "character", "string", "float",
    "double", "boolean", "void"

Design Patterns:
    "singleton", "multiton" 

==========
 Contacts
==========

For bug reporting, or any other correspondence, use one of the following vectors:

    - GitHub:       https://github.com/thesquaregroot/clazzy
    - Clazzy Wiki:  https://wiki.clazzy.org/index.php/Main_Page
    - Email:        Andrew Groot <andrew@clazzy.org>

