=================
 About Clazzy
=================

Clazzy is a code generation platform, which focuses on handling 
class definition syntax for the user in a variety of programming langauges.

By writing a straight-forward description of a high-level class design,
Clazzy will generate code in a number of user-specified programming
languages with "TODO" comments in function bodies.

This allows developers to quickly set up a multi-language project without
having to shift between language syntaxes for the boiler-plate class
definitions.  This avoids typos between projects, prevents compile-time errors
for simple syntax issues, and most importantly saves time.


===============
 Functionality
===============

Clazzy should, in general, be able to build code skeletons that can be used
to quickly get new projects on their feet quickly.  The generated code is 
expected to be edited by the user and is not necessarily expected to compile.

However, clazzy should be able to build portable, object-oriented code in many
languages.  Clazzy, should focus, at a minimum on providing some form of the 
key concepts in object-oriented programming including modularity, encapsulation,
and inheritance.

Clazzy will also attempt to emulate the most common practices for a given 
langauge, including code formatting, capitalization, and directory structure
from the same, common input.

For a more complete list of clazzy's features, see:

    http://wiki.clazzy.org/index.php/Feature_List

===========
 Compiling
===========

Code-distribution-wise, you should theoretically be able to compile clazzy
with recent versions of g++ and Gnu Make.  

If you run into issues, or would like to do development on clazzy, you may
need to install flex/flex++ and makedepend.  However, for simple edits, only
g++ and make should be necessary.

Clazzy is officially developed only in a GNU/Linux environment and portability
is not guaranteed, though the vast majority of the code base should be fairly
portable.

=========
 Classes
=========

------------------
 Input Processing
------------------

parser:
    Implements functions corresponding to the grammar rules below (in 
    recusive descent fashion) that uses FlexParser to read input.
    
    Contains a vector of class-def's and an array of languages it will 
    generate.

type_hint:
    Defines a high-level "type" that can optionally accept template or "generic"
    parameters.

type_convertor:
    Used by a language to convert type_hint objects into language-specific
    strings.

validator:
    Used just after parsing to find any issues in the class definitions and
    any intermediate processing.

---------------
 Data Modeling
---------------

class_def:
    Represents a class definition.  Is responsible for storing all relevant
    data for a "class" including high-level intentions like design patterns.

constructor:
    Represents a constructor definition, includes parameters and access 
    information.

method:
    Represents a function definition.  Contains parameter names and types, as
    well as access and return type information.

member:
    Represenets a class member, with type and access information.

accessible:
    A programming structure that is encapsulated.

parameterized:
    A programming structure that accepts parameters (inherited by constructor and method).

class_component:
    A programming structure that has basic access restrictions, such as
    static or read-only access (inherited by method and member).

The following type heirarchy is relevant to the above classes, with parents at the top and children
beneath.  Note that multiple inheritance is used to reduce code redundacy and to reflect the nature
of the types at a symbolic level.

          accessible   parameterized
         /    |    \     /    |
        /     |     \   /     |
  class_def   |  constructor  |
              |               |
              |              /
       class_component      /
            /   \          /
           /     \        /
          /       \      /
       member      method
                                        

-----------
 Languages
-----------

langauge:
    An abstract class meant to be extended for plugging in new languages.

language_factory:
    A class with a single static method, with acts as a bridge between
    the parser and the language implementations themselves.

----------------
 Helper Methods
----------------

io_functions:
    Provides methods for creating files and directories.

    First place to start for porting code.

string_functions:
    Provides methods for changing case for different language implementations.

=======
 Types
=======

Generic Types:
    "array", "deque", "list", "set",
    "stack", "queue", "map", "pointer" 

Primitive Types:
    "byte", "short", "integer", "long",
    "character", "string", "float",
    "double", "boolean", "void"

========
 Tokens
========

NOTE: These are only defined for the grammar below.
      See src/clazzy.lex and src/h/token.h for a more complete list.


INDEFINITE_ARTICLE              "a" or "an"
IDENTIFIER                      [a-zA-Z_\-]+
PROPERTY                        [a-zA-Z_]+=[^;]*

ACCESS_TYPE                     "visible" or "hidden" or
                                "child-visible" or "assembly-visible"

=========
 Grammar
=========

program:    statement
        |   statement program

statement:  property
        |   type-definition

property:   "%" PROPERTY ";"

type-definition:    INDEFINITE_ARTICLE IDENTIFIER definition-list

definition-list:    definition ";" definition-list
                |   definition ";" "and" definition "."
                |   definition "."

definition: "is" INDEFINITE_ARTICLE parent-list
        |   "has" attribute-list
        |   "can" action-list

parent-list:    parent "," parent-list
            |   parent

parent: type-hint
    |   "@" IDENTIFIER

action-list:    action "," action-list
            |   action

action: type-hint IDENTIFIER parameters
    |   type-hint IDENTIFIER
    |   "static" action
    |   "read-only" action
    |   ACCESS_TYPE action

parameters: "(" parameter-list ")"
        |   "(" ")"

parameter-list: parameter "," parameter-list
            |   parameter

parameter:  type-hint IDENTIFIER
        |   type-hint IDENTIFIER
        |   "constant" parameter [NOT IMPLEMENTED]
        |   parameter "reference" [NOT IMPLEMENTED]

attribute-list: attribute "," attribute-list
            |   attribute

attribute:  ACCESS_TYPE attribute [IMPLEMENTED NON-RECURSIVELY]
        |   constructor
        |   member
        |   member "with" "get"
        |   member "with" "set"
        |   member "with" "getset"

constructor:    "@construct" parameters
            |   "@destruct"
            |   "@destruct" "(" ")"

member: "static" member
    |   "constant" member
    |   type-hint IDENTIFIER

type-hint:  IDENTIFIER "<" generic-type-list ">"
        |   IDENTIFIER

generic-type-list:  type-hint "," generic-type-list
                |   type-hint

