=================
 About Cranberry
=================

Cranberry does things.... TODO

=========
 Classes
=========

---------
 Parsing
---------

parser:
    Implements functions corresponding to the grammar rules below (in recusive descent fashion) that uses FlexParser to
    read input.
    
    Contains a vector of class-def's and an array of languages it will generate.

---------------
 Data Modeling
---------------

class_def:
    Represents a class definition.

    Contains a vector of functions and another of members.

function:
    Represents a function declaration.

    Contains a map from function names to parameter names.

-----------
 Languages
-----------

langauge:
    An abstract class meant to be extended for plugging in new languages.

lang_cpp:
    A child class of language, implementing C++ output.

lang_java:
    A child class of language, implementing Java output.

lang_python:
    A child class of language, implementing Python output.

========
 Tokens
========
INDEFINITE_ARTICLE              "a" or "an" (case insensitive)
IDENTIFIER                      [a-zA-Z_\-]+
PROPERTY                        [a-zA-Z_]+=[^;]*

NOTE: These are only defined for use below.  See src/cranberry.lex and src/h/token.h for a more complete list.

=========
 Grammar
=========

program:    statement
        |   statement program

statement:  property
        |   type_definition

property:   "%" PROPERTY ";"

type_definition:    INDEFINITE_ARTICLE IDENTIFIER definition_section
                |   IDENTIFIER "is" INDEFINITE_ARTICLE IDENTIFIER "."
                |   IDENTIFIER "is" INDEFINITE_ARTICLE IDENTIFIER "that" definition_section

definition_section: definition "," definition_list
                |   definition "."

definition_list:    definition "," definition_list
                |   "and" definition "."
                |   definition "."

definition: "can" action_list
        |   "has" attribute_list

action_list:    action "," action_list
            |   action

action: IDENTIFIER parameters
    |   IDENTIFIER

attribute_list: IDENTIFIER attribute_list
            |   IDENTIFIER

parameters: "(" param_list ")"

param_list: IDENTIFIER "," param_list
        |   IDENTIFIER

